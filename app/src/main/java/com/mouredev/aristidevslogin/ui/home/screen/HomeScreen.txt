package com.mouredev.aristidevslogin.ui.home.screen


import android.annotation.SuppressLint
import android.widget.Toast
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material3.BottomAppBar
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.DrawerValue
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.ModalDrawerSheet
import androidx.compose.material3.ModalNavigationDrawer
import androidx.compose.material3.Scaffold
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.rememberDrawerState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.mouredev.aristidevslogin.components.ProductCard
import com.mouredev.aristidevslogin.ui.home.ui.ProductsViewModel
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import com.mouredev.aristidevslogin.R


@OptIn(ExperimentalMaterial3Api::class)
@SuppressLint("CoroutineCreationDuringComposition", "UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun HomeScreen(viewModel: ProductsViewModel, navController: NavController) {

    //Estado inicial del menú lateral
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val scope = rememberCoroutineScope()

    ModalNavigationDrawer(
        drawerContent = {
            //Contenido del menú (items)
            ModalDrawerSheet {
            }
        },
        drawerState = drawerState
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    {
                        IconButton(
                            onClick = { scope.launch { drawerState.open() } },
                        ) {
                            Icon(
                                imageVector = Icons.Default.Menu,
                                contentDescription = "Menu"
                            )

                        }
                    }
                )
            },
            bottomBar = {
                BottomAppBar(
                    modifier = Modifier.height(50.dp),
                    content = {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 16.dp, vertical = 8.dp),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            IconButton(onClick = { navController.navigate("Login") }) {
                                Icon(
                                    painter = painterResource(id = R.drawable.book_icon),
                                    contentDescription = "Book Icon",
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(onClick = {  }) {
                                Icon(
                                    painter = painterResource(id = R.drawable.movie_icon),
                                    contentDescription = "Movie Icon",
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                            IconButton(onClick = {  }) {
                                Icon(
                                    painter = painterResource(id = R.drawable.game_icon),
                                    contentDescription = "Game Icon",
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                        }
                    }
                )
            }
        ) { innerPadding ->

            val productList = viewModel.products.collectAsState().value
            val context = LocalContext.current

            LaunchedEffect(key1 = viewModel.showErrorToastChannel) {
                viewModel.showErrorToastChannel.collectLatest { show ->
                    if (show) {
                        Toast.makeText(
                            context, "Error cargando productos", Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            }


            if (productList.isEmpty()) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator()
                }
            } else {
                LazyColumn(
                    modifier = Modifier
                        .fillMaxSize(),
                    contentPadding = innerPadding // Para que no se superponga el contenido con la topBar y la bottomBar
                ) {
                    items(productList.size / 2) { row ->
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            ProductCard(
                                product = productList[2 * row],
                                modifier = Modifier.weight(1f)
                            )
                            ProductCard(
                                product = productList[2 * row + 1],
                                modifier = Modifier.weight(1f)
                            )
                        }
                        Spacer(modifier = Modifier.height(16.dp))
                    }
                }
            }
        }
    }
}